<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
    
    <entry>
      <title><![CDATA[JavaWeb开发(1)——Servlet&JSP]]></title>
      <url>http://4rnold.github.io/2016/06/30/JavaWeb%E5%BC%80%E5%8F%91(1)%E2%80%94%E2%80%94Servlet&JSP/</url>
      <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p><strong>问题：针对新建的web工程，需要手动将编译好的类复制到<code>WEB-INF/classes</code>目录下。麻烦</strong></p>
<blockquote>
<p>Eclipse中Java Build Path &gt; Source 设置Default output folder 到 WEB-INFO/classes目录</p>
</blockquote>
<p><strong>问题：tomcat webapp目录如何映射到工程目录？</strong></p>
<blockquote>
<p>配置Tomcat <context>元素，不要直接在server.xml中配置<context>元素，<br>    因为tomcat启动后将不再读取server.xml，因此无法在Tomcat启动的状态下 发布web应用。</context></context></p>
<p>通过创建独立的xml文件的方式来配置<context>，Tomcat 以Xml文件名作为Web应用的上下文路径。<br>    忽略<context>中 path 属性。</context></context></p>
<p>在apache/conf/ 目录下建立catalina/localhost目录，该目录下建立<code>helloworld.xml</code>文件。其中helloworld为访问路径<a href="http://localhost:8080/`helloworld`/xxxx" target="_blank" rel="external">http://localhost:8080/`helloworld`/xxxx</a><br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="tag">&lt;<span class="name">Context</span> <span class="attr">path</span>=<span class="string">"/test2"</span> <span class="attr">docBase</span>=<span class="string">""</span> <span class="attr">reloadable</span>=<span class="string">"true"</span> /&gt;</span></span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></p>
<p>其中path 为浏览器访问目录(无用)，docBase为WebApp所在目录（WebContent目录）。</p>
</blockquote>
<a id="more"></a>
<h1 id="servlet"><a href="#servlet" class="headerlink" title="servlet"></a>servlet</h1><h2 id="servlet-配置"><a href="#servlet-配置" class="headerlink" title="servlet 配置"></a>servlet 配置</h2><p><strong>注意：</strong><servlet-mapping> 中的 <url-pattern> 如果带<em>的话只能是 `/</em><code>或 *加扩展名</code><em>.xxx` 其他带 </em>的均不合法</url-pattern></servlet-mapping></p>
<h2 id="servlet-生命周期"><a href="#servlet-生命周期" class="headerlink" title="servlet 生命周期"></a>servlet 生命周期</h2><blockquote>
<p>构造方法 -&gt; init方法 -&gt; service方法 -&gt; destory方法</p>
</blockquote>
<h2 id="ServletConfig"><a href="#ServletConfig" class="headerlink" title="ServletConfig"></a>ServletConfig</h2><p>init 方法参数</p>
<p>在<servlet>节点中配置<init-param>,可配置多组<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>name<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>value<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br></pre></td></tr></table></figure></init-param></servlet></p>
<p>通过servletConfig中的方法可以获取到其中的值。</p>
<h2 id="ServletContext"><a href="#ServletContext" class="headerlink" title="ServletContext"></a>ServletContext</h2><p>可通过ServletConfig.getServletContext 获取</p>
<p>该对象代表当前web应用，可以取到该应用的各方面信息</p>
<h3 id="1-获取web-xml中web应用配置参数"><a href="#1-获取web-xml中web应用配置参数" class="headerlink" title="1.获取web.xml中web应用配置参数"></a>1.获取web.xml中web应用配置参数<context-param></context-param></h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">context-param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>name<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>value<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">context-param</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>相对于<init-param>，<context-param>可看作的全局参数。</context-param></init-param></p>
<h3 id="2-getRealPath-String-path"><a href="#2-getRealPath-String-path" class="headerlink" title="2.getRealPath(String path)"></a>2.getRealPath(String path)</h3><p>获取发布在服务器上的绝对路径</p>
<p>可用于查找eclipse在本地真正发布项目的位置</p>
<h3 id="3-getContextPath"><a href="#3-getContextPath" class="headerlink" title="3.getContextPath()"></a>3.getContextPath()</h3><p>获取当前web 应用名称</p>
<h3 id="4-getResourceAsStream-String-path"><a href="#4-getResourceAsStream-String-path" class="headerlink" title="4.getResourceAsStream(String path)"></a>4.getResourceAsStream(String path)</h3><p>获取某一文件对应的输入流</p>
<h2 id="ServletRequest-amp-ServletResponse"><a href="#ServletRequest-amp-ServletResponse" class="headerlink" title="ServletRequest &amp; ServletResponse"></a>ServletRequest &amp; ServletResponse</h2><p>service方法参数</p>
<p>这是两个接口，不同的servlet容器具体实现，传入service方法。</p>
<p><code>HttpServletRequest</code> 是 <code>ServletRequest</code> 子接口，封装http相关信息</p>
<h2 id="GenericServlet"><a href="#GenericServlet" class="headerlink" title="GenericServlet"></a>GenericServlet</h2><p>实现了<code>Servlet</code>接口。为了让子类不重写所有的servlet中的方法。</p>
<p>同时实现了<code>ServletConfig</code>接口，所以可以在service方法中直接方便使用 ServletConfig 对象的方法。 </p>
<blockquote>
<p>TIPS :IDEA 不能自动下载servlet-api源码（建立的Web Application 工程），显示从maven上没有搜索到。需要手工从<a href="http://tomcat.apache.org/index.html" target="_blank" rel="external">http://tomcat.apache.org/index.html</a> 下载源码后加载。</p>
</blockquote>
<h2 id="HttpServlet"><a href="#HttpServlet" class="headerlink" title="HttpServlet"></a>HttpServlet</h2><p>HttpServlet 继承 GenericServlet，重载service方法，将ServletRequest 和 ServletResponse 转为 HttpServletRequest 和 HttpServletResponse。<br>并根据请求分出 doGet和 doPost方法。</p>
<h1 id="JSP"><a href="#JSP" class="headerlink" title="JSP"></a>JSP</h1><h2 id="JSP-隐含对象"><a href="#JSP-隐含对象" class="headerlink" title="JSP 隐含对象"></a>JSP 隐含对象</h2><ul>
<li>request：HttpServletRequest</li>
<li><del>response</del>：HttpServletResponse（在jsp页面基本不用）</li>
<li>pageContext：页面上下文</li>
<li>session: HttpSession</li>
<li>application: servletContext，当前web应用。</li>
<li><del>config</del>：对应servlet中的servletConfig 可以获取配置参数，那么问题来了..</li>
</ul>
<p><strong>问题： jsp页面的参数则呢配置？</strong></p>
<blockquote>
<p>同普通servlet一样，只需要将原来<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>com.arnold.Test.MyFirstServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">&gt; 替换为</span><br><span class="line">&gt; <span class="tag">&lt;<span class="name">jsp-file</span>&gt;</span>/hello.jsp<span class="tag">&lt;/<span class="name">jsp-file</span>&gt;</span></span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></p>
<p>因为jsp本质也是一个servlet类么..但这样就只能通过访问servletName来访问此jsp</p>
</blockquote>
<ul>
<li>out: JspWriter, 调用out.println()可以直接打印</li>
<li><del>page</del>: 为object对象 基本不用。</li>
<li>exception: jsp页面声明&lt;%@ page isErrorPage=”true” %&gt;才可用</li>
</ul>
<h2 id="JSP-内置对象作用范围"><a href="#JSP-内置对象作用范围" class="headerlink" title="JSP 内置对象作用范围"></a>JSP 内置对象作用范围</h2><ul>
<li>pageContext : 当前jsp页面</li>
<li>request： 同一个请求</li>
<li>session： 同一个回话</li>
<li>application： 同一个应用</li>
</ul>
<h2 id="page指令"><a href="#page指令" class="headerlink" title="page指令"></a>page指令</h2><ul>
<li>session： 当前页面是否允许使用session</li>
<li>ErrorPage：指定错误页面指向，然后错误页面要使用isErrorPage=true,使用exception对象</li>
</ul>
<blockquote>
<p>TIPS: errorPage.jsp 一般不能直接方法，所以放到WEB-INF中，通过forward转发可以访问。</p>
<p>TIPS: 通常在web.xml中配置错误页面信息<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="tag">&lt;<span class="name">error-page</span>&gt;</span></span><br><span class="line">&gt;     <span class="tag">&lt;<span class="name">error-code</span>&gt;</span>500<span class="tag">&lt;/<span class="name">error-code</span>&gt;</span><span class="comment">&lt;!--可根据错误代码或异常类型判断--&gt;</span></span><br><span class="line">&gt;     <span class="tag">&lt;<span class="name">location</span>&gt;</span>/WEB-INFO/error.jsp<span class="tag">&lt;/<span class="name">location</span>&gt;</span></span><br><span class="line">&gt; <span class="tag">&lt;/<span class="name">error-page</span>&gt;</span></span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></p>
</blockquote>
<ul>
<li>contentType：实际调用的response.setContentType</li>
<li>pageEncoding: 当前jsp页面的字符编码，通常和contentType的charset一致</li>
</ul>
<blockquote>
<p>TIPS: <a href="http://my.oschina.net/chape/blog/138828" target="_blank" rel="external">contentType和pageEncoding的区别</a></p>
</blockquote>
<h2 id="include指令静态引入"><a href="#include指令静态引入" class="headerlink" title="include指令静态引入"></a>include指令静态引入</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ include file=&quot;url&quot;%&gt;</span><br></pre></td></tr></table></figure>
<p>静态包含，最后只生成<code>一个class</code>。</p>
<h2 id="动态引入"><a href="#动态引入" class="headerlink" title="动态引入"></a><jsp:include>动态引入</jsp:include></h2><p>生成两个class</p>
<h2 id=""><a href="#" class="headerlink" title=""></a><jsp:forward></jsp:forward></h2><p>相当于request.getRequestDispathcer(“b.jsp”).forward(request,response);</p>
<h1 id="请求转发"><a href="#请求转发" class="headerlink" title="请求转发"></a>请求转发</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//forward 一次请求</span></span><br><span class="line">String path = <span class="string">"testPath"</span>;</span><br><span class="line">RequestDispatcher requestDispatcher = request.getRequestDispatcher(<span class="string">"/"</span> + path);</span><br><span class="line">requestDispatcher.forward(request,response);</span><br><span class="line"></span><br><span class="line"><span class="comment">//redirect 两次请求(网址会变)</span></span><br><span class="line">response.sendRedirect(<span class="string">"path"</span>);</span><br></pre></td></tr></table></figure>
<ul>
<li><strong>forward是发送给web容器，然后web容器转发</strong>，Request对象不变。</li>
<li>redirect是浏览器302转发。</li>
</ul>
<p>forward “/” 代表当前web应用的根目录<br>redirect “/” 代表当前web站点的根目录</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Hello World]]></title>
      <url>http://4rnold.github.io/2016/06/11/hello-world/</url>
      <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="external">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="external">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="external">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="external">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="external">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="external">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="external">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="external">Deployment</a></p>
]]></content>
    </entry>
    
  
  
</search>
